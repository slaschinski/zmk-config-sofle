/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip {
    // chain-length = <6>;
    // chain-length = <35>; // Uncomment if using both per-key and underglow LEDs

    chain-length = <29>; // Uncomment if using only per-key LEDs.
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |

            bindings = <
&kp ESC           &kp N1  &kp N2        &kp N3  &kp N4    &kp N5                           &kp N6           &kp N7         &kp N8     &kp N9    &kp N0            &none
&kp CAPSLOCK      &kp Q   &kp W         &kp E   &kp R     &kp T                            &kp Y            &kp U          &kp I      &kp O     &kp P             &none
&kp LEFT_SHIFT    &kp A   &kp S         &kp D   &kp F     &kp G                            &kp H            &kp J          &kp K      &kp L     &kp SINGLE_QUOTE  &kp RIGHT_SHIFT
&kp LEFT_CONTROL  &kp Z   &kp X         &kp C   &kp V     &kp B      &none        &none    &kp N            &kp M          &kp COMMA  &kp DOT   &kp FSLH          &kp RIGHT_CONTROL
                          &kp LEFT_ALT  &none   &kp LGUI  &lt 1 TAB  &kp SPACE    &kp RET  &lt 2 BACKSPACE  &kp RIGHT_WIN  &none      &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans                           &kp F1                             &kp F2            &kp F3                &kp F4                 &kp F5                                   &kp F6         &kp F7          &kp F8           &kp F9             &kp F10    &kp F11
&trans                           &trans                             &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RA(RS(SEMICOLON))                    &kp CARET      &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp TILDE  &kp F12
&trans                           &kp EXCL                           &kp AT            &kp HASH              &kp DOLLAR             &kp PRCNT                                &kp ASTERISK   &kp MINUS       &kp EQUAL        &kp BACKSLASH      &kp GRAVE  &trans
&rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(102,100,50)  &ext_power EP_ON  &ext_power EP_OFF     &ext_power EP_TOG      &rgb_ug RGB_EFF        &trans    &trans  &kp AMPERSAND  &kp UNDERSCORE  &kp PLUS         &kp PIPE           &trans     &trans
                                                                    &bt BT_CLR        &bt BT_SEL 0          &bt BT_SEL 1           &trans                 &trans    &trans  &trans         &bt BT_SEL 2    &bt BT_SEL 3     &bt BT_SEL 4
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans  &trans  &trans        &trans        &trans        &trans                           &trans      &trans          &trans          &trans           &trans         &trans
&trans  &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp SEMICOLON                    &kp INSERT  &kp HOME        &kp UP_ARROW    &kp END          &kp PAGE_UP    &trans
&trans  &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp COLON                        &kp DELETE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PAGE_DOWN  &trans
&trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_0   &trans    &trans  &kp RA(S)   &kp RA(Q)       &kp RA(P)       &kp RA(Y)        &trans         &trans
                &trans        &trans        &trans        &trans         &trans    &trans  &trans      &trans          &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
